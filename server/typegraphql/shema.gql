# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Company {
  description: String!
  name: String!
  registerDate: Timestamp!
}

type Cook {
  experience: WorkExperience!
  name: String!
  yearsOfExperience: Int!
}

"""All possible preparation difficulty levels"""
enum Difficulty {
  Beginner
  Easy
  Hard
  MasterChef
  Medium
}

interface ITask {
  assignee: IUser!
  taskContent: String!
  taskId: ID!
  taskRate: Float!
  taskReward: Float!
  taskStatus: Boolean!
  taskTitle: String!
}

interface IUser {
  age: Float!
  isFool: Boolean!
  job: String!
  lastUpdateDate: Timestamp!
  name: String!
  registryDate: Timestamp!
  uid: ID!
}

type Mutation {
  CreateUser(newUserInfo: UserCreateInput!): User!
  DeleteUser(uid: String!): Status
  NotLongerFull(uid: String!): Status
  UpdateUser(modifiedUserInfo: UserUpdateInput!): Status
}

type Query {
  DeleteTask(taskId: Float!): Task!
  FindUserByConditions(age: Int, isFool: Boolean, name: String!): [User!]!
  FindUserById(uid: String!): User!
  GetTaskByID(taskId: Float!): Task!
  QueryTaskAssignee(taskId: Float!): User!
  QueryUserTasks(uid: Float!): [Task!]!
  Recipes(difficulty: Difficulty): [Recipe!]!
  Search(cookName: String!): [SearchResult!]!
  Tasks: [Task!]!
  ToggleTaskStatus(taskId: Float!): Task!
  Users: [User!]!
}

type Recipe {
  cook: Cook!
  description: String
  ingredients: [String!]!
  preparationDifficulty: Difficulty!
  title: String!
}

union SearchResult = Cook | Recipe

type Status {
  message: String!
  success: Boolean!
}

type Task implements ITask {
  assignee: IUser!
  taskContent: String!
  taskId: ID!
  taskRate: Float!
  taskReward: Float!
  taskStatus: Boolean!
  taskTitle: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User implements IUser {
  age: Float!
  isFool: Boolean!
  job: String!
  lastUpdateDate: Timestamp!
  name: String!
  registryDate: Timestamp!
  uid: ID!
}

""" User InputObject/Args"""
input UserCreateInput {
  age: Int
  isFool: Boolean
  name: String!
}

"""Args On Updating User"""
input UserUpdateInput {
  age: Int
  isFool: Boolean
  name: String!
  uid: String!
}

type WorkExperience {
  company: Company!
  isFired: Boolean!
  workYears: Float!
}
