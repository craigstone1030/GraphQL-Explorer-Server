# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
Login Input Type
"""
input AccountLoginInput {
  accountName: String!
  accountPwd: String!
  loginType: AccountType!
}

"""
Register Input Type
"""
input AccountRegistryInput {
  accountName: String!
  accountPwd: String!
  loginType: AccountType
}

"""
Account Type Enum
"""
enum AccountType {
  ADMIN
  COMMON
  DOMINATOR
  ENTERPRISE
  GOV
  ORG
  VISITOR
}

type Company {
  description: String!
  name: String!
  registerDate: Timestamp!
  scale: CompanyScale
}

"""
Company Scale
"""
enum CompanyScale {
  Huge
  Middle
  Small
}

type Cook {
  experience: WorkExperience!
  name: String!
  yearsOfExperience: Int!
}

"""
All possible preparation difficulty levels
"""
enum Difficulty {
  Beginner
  Easy
  Hard
  MasterChef
  Medium
}

"""
Executor Skill / Task Difficulty Level
"""
enum DifficultyLevel {
  BEGINNER
  LEGEND
  MASTER
  NOVICE
  OLD_DOMINATOR
  ROOKIE
  SKILLED
}

type Executor implements IExecutor {
  age: Float!
  desc: String!
  ExecutorDescField: ExecutorDesc!
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  spAgeField(param: Float): Int!
  tasks: [Task!]
  uid: ID!
}

"""
Args On Executor Create
"""
input ExecutorCreateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String!
  region: Region
}

type ExecutorDesc implements IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

"""
Args On Update Executor Desc
"""
input ExecutorDescUpdateInput {
  level: DifficultyLevel
  satisfaction: Int
  successRate: Int
}

"""
Executor Response Status Indicator
"""
type ExecutorStatus implements IBaseStatus {
  data: [Executor!]
  message: String!
  success: Boolean!
}

"""
Args On Executor Update
"""
input ExecutorUpdateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String
  region: Region
  uid: String!
}

"""
Basic Status Wrapper
"""
interface IBaseStatus {
  message: String!
  success: Boolean!
}

interface IExecutor {
  age: Float!
  desc: String
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  spAgeField: Int
  tasks: [Task!]
  uid: ID!
}

interface IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

interface ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

interface ITask {
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  taskAccmplished: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Float!
  taskReward: Float!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Job Type Enum
"""
enum Job {
  BE
  FE
}

union LevelQueryResult = Executor | Task

"""
Login / Register Status Indicator
"""
type LoginOrRegisterStatus implements IBaseStatus {
  expiredDate: Int
  message: String!
  success: Boolean!
  token: String
}

type Mutation {
  AccountRegistry(account: AccountRegistryInput!): LoginOrRegisterStatus!
  AssignTask(taskId: String!, uid: String!): TaskStatus!
  CreateExecutor(newExecutorInfo: ExecutorCreateInput!): ExecutorStatus!
  CreateNewTask(taskCreateParam: TaskCreateInput!): TaskStatus!
  DeleteExecutor(uid: String!): ExecutorStatus!
  DeleteTask(taskId: Float!): TaskStatus!
  ModifyPassword(accountName: String!): LoginOrRegisterStatus!
  publisherMutation(message: String): Boolean!
  pubSubMutation(message: String): Boolean!
  pubSubMutationToDynamicTopic(message: String, topic: String!): Boolean!
  ToggleTaskStatus(taskId: Float!): TaskStatus!
  UpdateExecutorBasicInfo(
    modifiedExecutorInfo: ExecutorUpdateInput!
  ): ExecutorStatus
  UpdateExecutorDesc(
    uid: String!
    userDesc: ExecutorDescUpdateInput!
  ): ExecutorStatus
  UpdateTaskInfo(taskUpdateParam: TaskUpdateInput!): TaskStatus!
}

type Notification {
  date: Timestamp!
  id: ID!
  message: String
}

input PaginationOptions {
  cursor: Int
  offset: Int
}

type Query {
  AccountLogin(account: AccountLoginInput!): LoginOrRegisterStatus!
  CheckIsTokenValid(token: String!): LoginOrRegisterStatus!
  ContainerRegisterTime: Timestamp!
  currentDate: Timestamp!
  Executors(pagination: PaginationOptions): ExecutorStatus!
  QueryAllSubstances(pagination: PaginationOptions): SubstanceStatus!
  QueryByDifficultyLevel(
    difficulty: DifficultyLevel
    pagination: PaginationOptions
  ): [LevelQueryResult!]!
  QueryExecutorByConditions(
    age: Int
    isFool: Boolean
    job: String
    level: DifficultyLevel!
    name: String
    region: Float
    satisfaction: Int
    successRate: Int
  ): ExecutorStatus!
  QueryExecutorByDesc(
    level: DifficultyLevel
    pagination: PaginationOptions
    satisfaction: Int
    successRate: Int
  ): ExecutorStatus!
  QueryExecutorById(uid: String!): ExecutorStatus!
  QueryExecutorTasks(uid: Float!): TaskStatus!
  QueryRecipesByDifficulty(difficulty: Difficulty): [Recipe!]!
  QueryRecipesByIngredients(ingredients: [String!]): [Recipe!]!
  QueryRecipeUnions(cookName: String!): [RecipeUnionResult!]!
  QueryTaskAssignee(taskId: Float!): ExecutorStatus!
  QueryTaskByID(taskId: Float!): TaskStatus!
  Tasks(pagination: PaginationOptions): TaskStatus!
}

type Recipe {
  cook: Cook
  description: String
  ingredients: [String!]
  preparationDifficulty: Difficulty
  title: String!
}

union RecipeUnionResult = Cook | Recipe | SaltFish

"""
Executor Region Enum
"""
enum Region {
  ABANDONED
  CENTRAL
  NORTH
  OTHER
  PACIFIC_OCEAN
  SOUTH
}

"""
useless object type in union type:)
"""
type SaltFish {
  EngelCoefficient: Int!
}

type Subscription {
  normalSubscription: Notification!
  subscriptionWithFilter: Notification!
  subscriptionWithFilterToDynamicTopic(topic: String!): Notification!
}

type Substance implements ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

"""
Substance Response Status Indicator
"""
type SubstanceStatus implements IBaseStatus {
  data: [Substance!]
  message: String!
  success: Boolean!
}

type Task implements ITask {
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  taskAccmplished: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Float!
  taskReward: Float!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Task InputObject
"""
input TaskCreateInput {
  taskContent: String
  taskLevel: Float
  taskReward: Float
  taskSource: Float
  taskTarget: Float
  taskTitle: String!
}

"""
Task Source
"""
enum TaskSource {
  GOV
  MERCHANT
  OTHER
  PERSONAL
  SCP
}

"""
Task Response Status Indicator
"""
type TaskStatus implements IBaseStatus {
  data: [Task!]
  message: String!
  success: Boolean!
}

"""
Task Against
"""
enum TaskTarget {
  AI
  ALIEN
  CTHULHU
  HUMAN
  OTHER
  SCP_ITEM
  WITCHER
}

"""
Args On Task Update
"""
input TaskUpdateInput {
  taskContent: String
  taskId: String!
  taskLevel: Float
  taskRate: Float
  taskReward: Float
  taskSource: Float
  taskTarget: Float
  taskTitle: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type WorkExperience {
  company: Company!
  isFired: Boolean!
  workYears: Float!
}
