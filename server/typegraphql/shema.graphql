# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Company {
  description: String!
  name: String!
  registerDate: Timestamp!
}

type Cook {
  experience: WorkExperience!
  name: String!
  yearsOfExperience: Int!
}

"""
All possible preparation difficulty levels
"""
enum Difficulty {
  Beginner
  Easy
  Hard
  MasterChef
  Medium
}

interface ITask {
  assignee: User
  taskContent: String!
  taskId: ID!
  taskRate: Float!
  taskReward: Float!
  taskStatus: Boolean!
  taskTitle: String!
}

interface IUser {
  age: Float!
  isFool: Boolean!
  job: String!
  lastUpdateDate: Timestamp!
  name: String!
  registryDate: Timestamp!
  uid: ID!
}

"""
Job Enum Type
"""
enum Job {
  BE
  FE
}

"""
Login / Register Status Indicator
"""
type LoginOrRegisterStatus {
  expiredDate: Int
  message: String!
  success: Boolean!
  token: String
}

type Mutation {
  AssignTask(taskId: String!, uid: String!): TaskStatus!
  CreateNewTask(taskCreateParam: TaskCreateInput!): Task!
  CreateUser(newUserInfo: UserCreateInput!): UserStatus!
  DeleteTask(taskId: Float!): Task!
  DeleteUser(uid: String!): UserStatus!
  publisherMutation(message: String): Boolean!
  pubSubMutation(message: String): Boolean!
  pubSubMutationToDynamicTopic(message: String, topic: String!): Boolean!
  ToggleTaskStatus(taskId: Float!): TaskStatus!
  UpdateTaskInfo(taskUpdateParam: TaskUpdateInput!): TaskStatus!
  UpdateUser(modifiedUserInfo: UserUpdateInput!): UserStatus
}

type Notification {
  date: Timestamp!
  id: ID!
  message: String
}

input PaginationOptions {
  cursor: Int
  offset: Int
}

type Query {
  AccountLogin(account: String!, password: String!): LoginOrRegisterStatus!
  CheckIsTokenValid(token: String!): LoginOrRegisterStatus!
  currentDate: Timestamp!
  FindTaskByID(taskId: Float!): TaskStatus!
  FindUserByConditions(
    age: Int
    isFool: Boolean
    job: String
    name: String
  ): UserStatus!
  FindUserById(uid: String!): UserStatus!
  InjectDataFromService: UserStatus!
  QueryTaskAssignee(taskId: Float!): UserStatus!
  QueryUserTasks(uid: Float!): TaskStatus!
  Recipes(difficulty: Difficulty): [Recipe!]!
  Search(cookName: String!): [SearchResult!]!
  Tasks(pagination: PaginationOptions): TaskStatus!
  Users(pagination: PaginationOptions): UserStatus!
}

type Recipe {
  cook: Cook!
  description: String
  ingredients: [String!]!
  preparationDifficulty: Difficulty!
  title: String!
}

union SearchResult = Cook | Recipe

type Subscription {
  normalSubscription: Notification!
  subscriptionWithFilter: Notification!
  subscriptionWithFilterToDynamicTopic(topic: String!): Notification!
}

type Task implements ITask {
  assignee: User
  taskContent: String!
  taskId: ID!
  taskRate: Float!
  taskReward: Float!
  taskStatus: Boolean!
  taskTitle: String!
}

"""
Task InputObject
"""
input TaskCreateInput {
  taskContent: String
  taskReward: Float
  taskTitle: String!
}

"""
Task Response Status Indicator
"""
type TaskStatus {
  data: [Task!]
  message: String!
  success: Boolean!
}

"""
Args On Task Update
"""
input TaskUpdateInput {
  taskContent: String
  taskId: String!
  taskRate: Float
  taskReward: Float
  taskTitle: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User implements IUser {
  age: Float!
  isFool: Boolean!
  job: String!
  lastUpdateDate: Timestamp!
  name: String!
  registryDate: Timestamp!
  spAgeField(param: Float): Float
  tasks: [Task!]
  uid: ID!
}

"""
 User InputObject/Args
"""
input UserCreateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String!
}

"""
User Response Status Indicator
"""
type UserStatus {
  data: [User!]
  message: String!
  success: Boolean!
}

"""
Args On User Update
"""
input UserUpdateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String!
  uid: String!
}

type WorkExperience {
  company: Company!
  isFired: Boolean!
  workYears: Float!
}
